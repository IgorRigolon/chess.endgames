[{"name":"app.R","content":"webr::install(\"arrow\")\r\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\nlibrary(plotly)\r\nlibrary(shinycssloaders)\r\nlibrary(shinyWidgets)\r\nlibrary(stringr)\r\nlibrary(bslib)\r\nlibrary(shinyjs)\r\nlibrary(shinyBS)\r\n\r\ndat <- open_dataset(\"gs://anonymous@chess_endgames\")\r\n\r\nui <- fluidPage(\r\n    tags$head(\r\n        tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"app_style.css\"),\r\n        tags$script(src = \"chess-editor.js\"),\r\n        # chessboard.js\r\n        tags$script(src = \"https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js\",\r\n                    integrity = \"sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD\",\r\n                    crossorigin = \"anonymous\"),\r\n        # Include chessboard.js default stylesheet\r\n        tags$link(rel = \"stylesheet\", href = \"https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css\")\r\n    ),\r\n    textOutput(\"plot_title\"),\r\n    textOutput(\"plot_subtitle\"),\r\n    br(),\r\n    bsCollapse(\r\n        id = \"panels\", open = \"Filter games\",\r\n        bsCollapsePanel(\r\n            HTML(\"Filter games <i class='fa fa-chevron-down pull-right' style='margin-top: 2px;'><\/i>\"),\r\n            value = \"Filter games\",\r\n            fluidRow(div(\r\n                           h4(\"Select time controls:\"),\r\n                           checkboxGroupButtons(\r\n                               inputId = \"time_control\",\r\n                               label = NULL,\r\n                               choices = c(\r\n                                   \"UltraBullet\", \"Bullet\", \"Blitz\", \"Rapid\", \"Classical\"\r\n                               ),\r\n                               selected = c(\r\n                                   \"UltraBullet\", \"Bullet\", \"Blitz\", \"Rapid\", \"Classical\"\r\n                               )\r\n                       )\r\n                ),\r\n                div(\r\n                           style = \"margin: auto; text-align: center; display: flex; justify-content: center; align-items: center; flex-direction: column;\",\r\n                           h4(\"Select rating range:\"),\r\n                           sliderInput(\r\n                               \"rating\",\r\n                               label = NULL,\r\n                               min = 400,\r\n                               max = 3400,\r\n                               value = c(400, 3400),\r\n                               step = 100\r\n                           )\r\n                )\r\n            ),\r\n            # Chess board and buttons\r\n            h4(\"Set up a position and search for games with the same material imbalance (Kings ignored) or the same exact position\"),\r\n            div(\r\n                style = \"display: flex; justify-content: center; align-items: center; width: 100%; padding: 20px;\",\r\n                tags$div(id = \"myBoard\", style = \"width: 400px;\")\r\n            ),\r\n            div(\r\n                style = \"text-align: center; margin: 20px; display: flex; justify-content: center; gap: 10px;\",\r\n                actionBttn(\r\n                    \"clearBtn\", \r\n                    label = \"Clear board\",\r\n                    style = \"bordered\",\r\n                    color = \"primary\",\r\n                    icon = icon(\"trash\"),\r\n                    size = \"sm\"\r\n                ),\r\n                actionBttn(\r\n                    \"white_to_move\", \r\n                    label = \"White to move\",\r\n                    style = \"bordered\",\r\n                    color = \"primary\",\r\n                    size = \"sm\"\r\n                )\r\n            ),\r\n            div(\r\n                style = \"text-align: center; margin: 20px; display: flex; justify-content: center; gap: 10px;\",\r\n                actionBttn(\r\n                    inputId = \"search_material\",\r\n                    label = \"Search material\",\r\n                    icon = icon(\"play\"),\r\n                    style = \"bordered\",\r\n                    color = \"primary\"\r\n                ),\r\n                actionBttn(\r\n                    inputId = \"search_position\",\r\n                    label = \"Search position\",\r\n                    icon = icon(\"play\"),\r\n                    style = \"bordered\",\r\n                    color = \"primary\"\r\n                )\r\n            )\r\n        )\r\n    ),\r\n    uiOutput(\"plot\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  # plot title\r\n\r\n  output$plot_title <- renderText({\r\n    \"Lichess games: tablebase evals vs. results\"\r\n  })\r\n\r\n  # define the subtitle of the graph\r\n\r\n  output$plot_subtitle <- renderText({\r\n    paste0(\r\n      paste0(input$time_control, collapse = \", \"),\r\n      \" games with average rating \",\r\n      input$rating[1], \"-\", input$rating[2],\r\n      \" that reached a tablebase position\"\r\n    )\r\n  })\r\n\r\n  # making the buttons antagonistic\r\n  \r\n  counts <- reactiveValues()\r\n\r\n  observeEvent(input$search_material, {\r\n      updateCollapse(session, \"panels\", close = \"Filter games\")\r\n    reset(\"search_position\")\r\n    \r\n      counts$white_queen  <- str_count(input$current_fen, \"Q\")\r\n      counts$black_queen  <- str_count(input$current_fen, \"q\")\r\n      counts$white_rook   <- str_count(input$current_fen, \"R\")\r\n      counts$black_rook   <- str_count(input$current_fen, \"r\")\r\n      counts$white_knight <- str_count(input$current_fen, \"N\")\r\n      counts$black_knight <- str_count(input$current_fen, \"n\")\r\n      counts$white_bishop <- str_count(input$current_fen, \"B\")\r\n      counts$black_bishop <- str_count(input$current_fen, \"b\")\r\n      counts$white_pawn   <- str_count(input$current_fen, \"P\")\r\n      counts$black_pawn   <- str_count(input$current_fen, \"p\")\r\n  })\r\n  \r\n  position <- reactiveValues()\r\n  \r\n  observeEvent(input$search_position, {\r\n      updateCollapse(session, \"panels\", close = \"Filter games\")\r\n    reset(\"search_material\")\r\n    position$fen <- paste(input$current_fen, substr(move_state(), 1, 1))\r\n  })\r\n\r\n  # keep only the time control and rating ranges chosen\r\n\r\n  filtered_dat <- reactive({\r\n    dat <- dat %>%\r\n      filter(time_control %in% input$time_control)\r\n\r\n    if (input$rating[1] > 400) {\r\n      dat <- dat %>%\r\n        filter(avg_elo >= input$rating[1])\r\n    }\r\n\r\n    if (input$rating[2] < 3400) {\r\n      dat <- dat %>%\r\n        filter(avg_elo <= input$rating[2])\r\n    }\r\n\r\n    # store total games and observations\r\n\r\n    total_positions <<- nrow(dat)\r\n\r\n    total_games <<- dat %>%\r\n      summarise(total_games = n_distinct(id)) %>%\r\n      collect() %>%\r\n      pull(total_games)\r\n\r\n    # filter specific fen\r\n    if (input$search_position && position$fen != \"\") {\r\n      dat <- dat %>%\r\n        filter(\r\n          stringr::str_detect(fens, position$fen)\r\n        )\r\n    }\r\n\r\n    if (input$search_material) {\r\n      # count material\r\n      white_total <- counts$white_queen + counts$white_rook + \r\n          counts$white_knight + counts$white_bishop + counts$white_pawn\r\n      black_total <- counts$black_queen + counts$black_pawn +\r\n          counts$black_rook + counts$black_knight + counts$black_bishop\r\n      total_pieces <- white_total + black_total\r\n      \r\n      # Validate piece count\r\n      shiny::validate(\r\n        need(total_pieces <= 3, \"Too many pieces selected. Maximum is 3 pieces.\")\r\n      )\r\n\r\n      # impose material\r\n      if (total_pieces > 0) {\r\n        dat <- dat %>%\r\n          filter(\r\n              white_material == white_total,\r\n              black_material == black_total\r\n        ) %>%\r\n            filter(\r\n                white_queen  == counts$white_queen,\r\n                black_queen  == counts$black_queen,\r\n                white_rook   == counts$white_rook,\r\n                black_rook   == counts$black_rook,\r\n                white_knight == counts$white_knight,\r\n                black_knight == counts$black_knight,\r\n                white_bishop == counts$white_bishop,\r\n                black_bishop == counts$black_bishop,\r\n                white_pawn   == counts$white_pawn,\r\n                black_pawn   == counts$black_pawn\r\n            )\r\n      }\r\n    }\r\n\r\n    num_position <<- nrow(dat)\r\n\r\n    num_game <<- dat %>%\r\n      summarise(total_games = n_distinct(id)) %>%\r\n      collect() %>%\r\n      pull(total_games)\r\n\r\n    # aggregate results\r\n\r\n    # first, eval to result layer\r\n\r\n    eval_to_result <- dat %>%\r\n      group_by(eval, result) %>%\r\n      summarise(\r\n        num_positions = n(),\r\n        num_games = n_distinct(id),\r\n        .groups = \"drop\"\r\n      ) %>%\r\n      collect() %>%\r\n      mutate(\r\n        source = case_match(\r\n          eval,\r\n          2 ~ \"0\",\r\n          1 ~ \"1\",\r\n          0 ~ \"2\",\r\n          -1 ~ \"3\",\r\n          -2 ~ \"4\"\r\n        ),\r\n        target = case_match(\r\n          result,\r\n          1 ~ \"5\",\r\n          0 ~ \"6\",\r\n          -1 ~ \"7\"\r\n        )\r\n      )\r\n\r\n    # result to termination\r\n\r\n    result_to_termination <- dat %>%\r\n      group_by(eval, result, termination) %>%\r\n      summarise(\r\n        num_positions = n(),\r\n        num_games = n_distinct(id),\r\n        .groups = \"drop\"\r\n      ) %>%\r\n      collect() %>%\r\n      mutate(\r\n        source = case_match(\r\n          result,\r\n          1 ~ \"5\",\r\n          0 ~ \"6\",\r\n          -1 ~ \"7\"\r\n        ),\r\n        target = case_match(\r\n          termination,\r\n          \"Normal\" ~ \"8\",\r\n          \"Time forfeit\" ~ \"9\",\r\n          \"Abandoned\" ~ \"10\",\r\n          \"Rules infraction\" ~ \"11\",\r\n        )\r\n      )\r\n\r\n    # altogether\r\n\r\n    dat <- bind_rows(\r\n      eval_to_result, result_to_termination\r\n    ) %>%\r\n      arrange(source, target)\r\n\r\n    dat\r\n  })\r\n\r\n  output$plot <- renderUI({\r\n    if (input$search_material == 0 && input$search_position == 0) {\r\n      # Show card instead of plot\r\n      div(\r\n        style = \"display: flex; justify-content: center; align-items: center; height: 80vh;\",\r\n        card(\r\n          style = \"text-align: center; padding: 40px;\",\r\n          h3(\"No Data Selected\", style = \"color: #666;\"),\r\n          p(\"Please click 'Search material' or 'Search position' to begin analyzing games.\"),\r\n          icon(\"search\", style = \"font-size: 48px; color: #ccc; margin-top: 20px;\")\r\n        )\r\n      )\r\n    } else {\r\n      # Show the actual plot\r\n      withSpinner(\r\n        plotlyOutput(\"actual_plot\", width = \"100%\", height = \"80vh\")\r\n      )\r\n    }\r\n  })\r\n\r\n  output$actual_plot <- renderPlotly({\r\n    df_p <- filtered_dat()\r\n\r\n    all_nodes <- union(unique(df_p$source), unique(df_p$target))\r\n\r\n    node_labels <- case_match(\r\n      all_nodes,\r\n      \"0\" ~ \"Winning\",\r\n      \"1\" ~ \"Cursed Win\",\r\n      \"2\" ~ \"Drawn\",\r\n      \"3\" ~ \"Blessed draw\",\r\n      \"4\" ~ \"Losing\",\r\n      \"5\" ~ \"Win\",\r\n      \"6\" ~ \"Draw\",\r\n      \"7\" ~ \"Loss\",\r\n      \"8\" ~ \"Normal\",\r\n      \"9\" ~ \"Time forfeit\",\r\n      \"10\" ~ \"Abandoned\",\r\n      \"11\" ~ \"Rules infraction\"\r\n    )\r\n    \r\n    node_type <- case_match(\r\n        all_nodes,\r\n        \"0\" ~ \"Tablebase eval\",\r\n        \"1\" ~ \"Tablebase eval\",\r\n        \"2\" ~ \"Tablebase eval\",\r\n        \"3\" ~ \"Tablebase eval\",\r\n        \"4\" ~ \"Tablebase eval\",\r\n        \"5\" ~ \"Result\",\r\n        \"6\" ~ \"Result\",\r\n        \"7\" ~ \"Result\",\r\n        \"8\" ~ \"Termination\",\r\n        \"9\" ~ \"Termination\",\r\n        \"10\" ~ \"Termination\",\r\n        \"11\" ~ \"Termination\"\r\n    )\r\n\r\n    node_colors <- case_match(\r\n      all_nodes,\r\n      # eval nodes\r\n      c(\"0\", \"1\", \"5\") ~ \"#2b83ba\",\r\n      c(\"2\", \"3\", \"6\") ~ \"#DDA0DD\",\r\n      c(\"4\", \"7\") ~ \"#d7191c\",\r\n\r\n      # termination nodes\r\n      \"8\" ~ \"#FF69B4\",\r\n      \"9\" ~ \"#20B2AA\",\r\n      \"10\" ~ \"purple\",\r\n      \"11\" ~ \"#d7191c\",\r\n      .default = \"#87CEEB\"\r\n    )\r\n\r\n    link_colors <- case_when(\r\n      df_p$target %in% c(\"5\") ~ alpha(\"#2b83ba\", 0.6),\r\n      df_p$target %in% c(\"6\") ~ alpha(\"#DDA0DD\", 0.6),\r\n      df_p$target %in% c(\"7\") ~ alpha(\"#d7191c\", 0.6),\r\n      df_p$source %in% c(\"0\", \"1\", \"5\") ~ alpha(\"#2b83ba\", 0.6),\r\n      df_p$source %in% c(\"2\", \"3\", \"6\") ~ alpha(\"#DDA0DD\", 0.6),\r\n      df_p$source %in% c(\"4\", \"7\") ~ alpha(\"#d7191c\", 0.6),\r\n      .default = \"#87CEEB\"\r\n    )\r\n    \r\n    # link types\r\n    source_types <- case_match(\r\n        df_p$source,\r\n        as.character(0:4) ~ \"Tablebase eval\",\r\n        as.character(5:7) ~ \"Result\",\r\n        as.character(8:11) ~ \"Termination\"\r\n    )\r\n    \r\n    target_types <- case_match(\r\n        df_p$target,\r\n        as.character(1:4) ~ \"Tablebase eval\",\r\n        as.character(5:7) ~ \"Result\",\r\n        as.character(8:11) ~ \"Termination\"\r\n    )\r\n    \r\n    source_labels <- case_match(\r\n        df_p$source,\r\n        \"0\" ~ \"Winning\",\r\n        \"1\" ~ \"Cursed Win\",\r\n        \"2\" ~ \"Drawn\",\r\n        \"3\" ~ \"Blessed draw\",\r\n        \"4\" ~ \"Losing\",\r\n        \"5\" ~ \"Win\",\r\n        \"6\" ~ \"Draw\",\r\n        \"7\" ~ \"Loss\",\r\n    )\r\n    \r\n    target_labels <- case_match(\r\n        df_p$target,\r\n        \"5\" ~ \"Win\",\r\n        \"6\" ~ \"Draw\",\r\n        \"7\" ~ \"Loss\",\r\n        \"8\" ~ \"Normal\",\r\n        \"9\" ~ \"Time forfeit\",\r\n        \"10\" ~ \"Abandoned\",\r\n        \"11\" ~ \"Rules infraction\"\r\n    )\r\n\r\n    source_indices <- match(df_p$source, all_nodes) - 1\r\n    target_indices <- match(df_p$target, all_nodes) - 1\r\n    \r\n    # Create the Sankey plot\r\n    fig <- plot_ly(\r\n      type = \"sankey\",\r\n      domain = list(\r\n        x = c(0, 1),\r\n        y = c(0, 1)\r\n      ),\r\n      orientation = \"h\",\r\n      valueformat = \".0f\",\r\n      valuesuffix = \"\",\r\n      node = list(\r\n        label = node_labels,\r\n        customdata = node_type,\r\n        hovertemplate = HTML(\r\n            \" <b>%{customdata}:<\/b> %{label}<br>\",\r\n            \"<b> Positions:<\/b> %{value}<extra><\/extra>\"\r\n        ),\r\n        color = node_colors,\r\n        pad = 15,\r\n        thickness = 15,\r\n        line = list(\r\n          color = \"black\",\r\n          width = 0.5\r\n        )\r\n      ),\r\n      link = list(\r\n        source = source_indices,\r\n        target = target_indices,\r\n        value = df_p$num_positions,\r\n        color = link_colors,\r\n        label = paste0(df_p$num_games),\r\n        customdata = cbind(source_types, source_labels,\r\n                           target_types, target_labels,\r\n                           round(100*df_p$num_positions/num_position, 1),\r\n                           round(100*df_p$num_games/num_game, 1)),\r\n        hovertemplate = HTML(\r\n            \" <b>%{customdata[0]}:<\/b> %{customdata[1]}<br>\",\r\n            \"<b>%{customdata[2]}:<\/b> %{customdata[3]}<br>\",\r\n            \"<b>Positions:<\/b> %{value} (%{customdata[4]}%) <br>\",\r\n            \"<b>Games: <\/b> %{label} (%{customdata[5]}%)<extra><\/extra>\"\r\n        )\r\n      )\r\n    )\r\n\r\n    fig <- fig %>% layout(\r\n      font = list(size = 16, family = \"JetBrains Mono\"),\r\n      margin = list(t = 60),\r\n      annotations = list(\r\n        list(\r\n          text = paste0(\r\n            format(num_position, big.mark = \",\"), \" positions out of \",\r\n            format(total_positions, big.mark = \",\"),\r\n            \" total endgame positions (\",\r\n            round(100 * num_position / total_positions, 1), \"%)\"\r\n          ),\r\n          x = 0.5, y = 1.05,\r\n          xref = \"paper\", yref = \"paper\",\r\n          xanchor = \"center\", yanchor = \"bottom\",\r\n          showarrow = FALSE,\r\n          font = list(size = 14, color = \"black\")\r\n        ),\r\n        list(\r\n          text = paste0(\r\n            format(num_game, big.mark = \",\"), \" unique games \",\r\n            \"out of \", format(total_games, big.mark = \",\"),\r\n            \" (\", round(100 * num_game / total_games, 1), \"%)\"\r\n          ),\r\n          x = 0.5, y = 1.02,\r\n          xref = \"paper\", yref = \"paper\",\r\n          xanchor = \"center\", yanchor = \"bottom\",\r\n          showarrow = FALSE,\r\n          font = list(size = 14, color = \"black\")\r\n        )\r\n      )\r\n    )\r\n\r\n    fig\r\n  })\r\n  \r\n  # Track move state\r\n  move_state <- reactiveVal(\"white\")\r\n  \r\n  observeEvent(input$white_to_move, {\r\n      if (move_state() == \"white\") {\r\n          # Switch to black\r\n          move_state(\"black\")\r\n          updateActionButton(\r\n              session, \r\n              \"white_to_move\", \r\n              label = \"Black to move\"\r\n          )\r\n          # You can also add custom CSS class\r\n          runjs(\"$('#white_to_move').removeClass('btn-primary').addClass('btn-dark');\")\r\n      } else {\r\n          # Switch to white  \r\n          move_state(\"white\")\r\n          updateActionButton(\r\n              session, \r\n              \"white_to_move\", \r\n              label = \"White to move\"\r\n          )\r\n          runjs(\"$('#white_to_move').removeClass('btn-dark').addClass('btn-primary');\")\r\n      }\r\n  })\r\n  \r\n  # Access current state with: move_state()\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"www/app_style.css","content":"@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,300;0,400;0,700;1,400&family=JetBrains+Mono:wght@300;400&family=Roboto:wght@100;300;400;500&display=swap');\r\n\r\n.container-fluid {\r\n\tmargin-top: 30px !important;\r\n}\r\n\r\n.white-pieces .control-label {\r\n\tcolor: white;\r\n\tfont-family: JetBrains Mono;\r\n\ttext-shadow: 1px 1px 1px black, -1px -1px 1px black, 1px -1px 1px black, -1px 1px 1px black;\r\n\tfont-weight: bold;\r\n}\r\n\r\n.black-pieces .control-label {\r\n\tfont-family: JetBrains Mono;\r\n\tcolor: #333;\r\n\tfont-weight: bold;\r\n\ttext-shadow: 1px 1px 1px #ccc, -1px -1px 1px #ccc, 1px -1px 1px #ccc, -1px 1px 1px #ccc;\r\n}\r\n\r\n#plot_subtitle {\r\n\tfont-family: JetBrains Mono;\r\n\tfont-style: normal;\r\n\tfont-weight: 100;\r\n\tfont-size: 1.0em;\r\n\tline-height: 1.3em;\r\n\ttext-align: center;\r\n\tletter-spacing: -0.035em;\r\n\ttext-transform: uppercase;\r\n\tcolor: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n#plot_title {\r\n\tfont-family: JetBrains Mono;\r\n\tfont-style: normal;\r\n\tfont-weight: normal;\r\n\tfont-size: 1.6em;\r\n\tline-height: 1.6em;\r\n\tletter-spacing: -0.025em;\r\n\ttext-align: center;\r\n\ttext-transform: uppercase;\r\n}\r\n\r\nh3 {\r\n\tfont-family: JetBrains Mono;\r\n\tfont-style: normal;\r\n\tfont-weight: bold;\r\n\tfont-size: 1.2em;\r\n\tline-height: 1.3em;\r\n\ttext-align: center;\r\n\tletter-spacing: -0.035em;\r\n\ttext-transform: uppercase;\r\n}\r\n\r\nh4 {\r\n\tfont-family: JetBrains Mono;\r\n\tfont-style: normal;\r\n\tfont-weight: bold;\r\n\tfont-size: 1.0em;\r\n\tline-height: 1.3em;\r\n\ttext-align: center;\r\n\tletter-spacing: -0.035em;\r\n\ttext-transform: uppercase;\r\n}\r\n\r\n.card {\r\n\tpadding: 15px;\r\n\tborder:\r\n\t\t1px solid #ddd;\r\n\tborder-radius: 5px;\r\n\tbackground: white;\r\n\ttext-align: center;\r\n}\r\n\r\n.card h4 {\r\n\tmargin-top: 0;\r\n}\r\n\r\n#search_material,\r\n#search_position,\r\n#clearBtn,\r\n#white_to_move,\r\n.btn-group-toggle {\r\n\tfont-family: JetBrains Mono;\r\n\tmargin-top: 15px;\r\n\tcolor: black;\r\n\tborder-color: black;\r\n}\r\n\r\n#white_to_play {\r\n    width: fit-content;\r\n    fill-color: blue;\r\n}\r\n\r\n.js-plotly-plot .annotation-text {\r\n  font-family: JetBrains Mono;\r\n}\r\n\r\n#panels {\r\n    text-align: center;\r\n}","type":"text"},{"name":"www/chess-editor.js","content":"var board;\r\n\r\n$(document).ready(function() {\r\n  board = Chessboard('myBoard', {\r\n    draggable: true,\r\n    dropOffBoard: 'trash',\r\n    sparePieces: true,\r\n    position: 'empty',\r\n    pieceTheme: 'img/{piece}.svg'\r\n  });\r\n  \r\n  $('#clearBtn').on('click', function() {\r\n    board.clear();\r\n  });\r\n  \r\n  // Send FEN when search buttons are clicked\r\n  $('#search_material').on('click', function() {\r\n    sendFenToShiny();\r\n  });\r\n  \r\n  $('#search_position').on('click', function() {\r\n    sendFenToShiny();\r\n  });\r\n});\r\n\r\nfunction sendFenToShiny() {\r\n  if (board) {\r\n    var fen = board.fen();\r\n    Shiny.setInputValue('current_fen', fen, {priority: \"event\"});\r\n  }\r\n}","type":"text"},{"name":"www/img/bB.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><g fill=\"#000\" stroke-linecap=\"butt\"><path d=\"M9 36c3.4-1 10.1.4 13.5-2 3.4 2.4 10.1 1 13.5 2 0 0 1.6.5 3 2-.7 1-1.6 1-3 .5-3.4-1-10.1.5-13.5-1-3.4 1.5-10.1 0-13.5 1-1.4.5-2.3.5-3-.5 1.4-2 3-2 3-2z\"/><path d=\"M15 32c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2z\"/><path d=\"M25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\"/><\/g><path stroke=\"#ececec\" stroke-linejoin=\"miter\" d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\"/><\/g><\/svg>","type":"text"},{"name":"www/img/bK.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path stroke-linejoin=\"miter\" d=\"M22.5 11.6V6\"/><path fill=\"#000\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\"/><path fill=\"#000\" d=\"M11.5 37a22.3 22.3 0 0 0 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\"/><path stroke-linejoin=\"miter\" d=\"M20 8h5\"/><path stroke=\"#ececec\" d=\"M32 29.5s8.5-4 6-9.7C34.1 14 25 18 22.5 24.6v2.1-2.1C20 18 9.9 14 7 19.9c-2.5 5.6 4.8 9 4.8 9\"/><path stroke=\"#ececec\" d=\"M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\"/><\/g><\/svg>","type":"text"},{"name":"www/img/bN.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path fill=\"#000\" d=\"M22 10c10.5 1 16.5 8 16 29H15c0-9 10-6.5 8-21\"/><path fill=\"#000\" d=\"M24 18c.38 2.91-5.55 7.37-8 9-3 2-2.82 4.34-5 4-1.04-.94 1.41-3.04 0-3-1 0 .19 1.23-1 2-1 0-4 1-4-4 0-2 6-12 6-12s1.89-1.9 2-3.5c-.73-1-.5-2-.5-3 1-1 3 2.5 3 2.5h2s.78-2 2.5-3c1 0 1 3 1 3\"/><path fill=\"#ececec\" stroke=\"#ececec\" d=\"M9.5 25.5a.5.5 0 1 1-1 0 .5.5 0 1 1 1 0zm5.43-9.75a.5 1.5 30 1 1-.86-.5.5 1.5 30 1 1 .86.5z\"/><path fill=\"#ececec\" stroke=\"none\" d=\"m24.55 10.4-.45 1.45.5.15c3.15 1 5.65 2.49 7.9 6.75S35.75 29.06 35.25 39l-.05.5h2.25l.05-.5c.5-10.06-.88-16.85-3.25-21.34-2.37-4.49-5.79-6.64-9.19-7.16l-.51-.1z\"/><\/g><\/svg>","type":"text"},{"name":"www/img/bP.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><path stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"1.5\" d=\"M22.5 9a4 4 0 0 0-3.22 6.38 6.48 6.48 0 0 0-.87 10.65c-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47a6.46 6.46 0 0 0-.87-10.65A4.01 4.01 0 0 0 22.5 9z\"/><\/svg>","type":"text"},{"name":"www/img/bQ.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><g stroke=\"none\"><circle cx=\"6\" cy=\"12\" r=\"2.75\"/><circle cx=\"14\" cy=\"9\" r=\"2.75\"/><circle cx=\"22.5\" cy=\"8\" r=\"2.75\"/><circle cx=\"31\" cy=\"9\" r=\"2.75\"/><circle cx=\"39\" cy=\"12\" r=\"2.75\"/><\/g><path stroke-linecap=\"butt\" d=\"M9 26c8.5-1.5 21-1.5 27 0l2.5-12.5L31 25l-.3-14.1-5.2 13.6-3-14.5-3 14.5-5.2-13.6L14 25 6.5 13.5 9 26z\"/><path stroke-linecap=\"butt\" d=\"M9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\"/><path fill=\"none\" stroke-linecap=\"butt\" d=\"M11 38.5a35 35 1 0 0 23 0\"/><path fill=\"none\" stroke=\"#ececec\" d=\"M11 29a35 35 1 0 1 23 0m-21.5 2.5h20m-21 3a35 35 1 0 0 22 0m-23 3a35 35 1 0 0 24 0\"/><\/g><\/svg>","type":"text"},{"name":"www/img/bR.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path stroke-linecap=\"butt\" d=\"M9 39h27v-3H9v3zm3.5-7 1.5-2.5h17l1.5 2.5h-20zm-.5 4v-4h21v4H12z\"/><path stroke-linecap=\"butt\" stroke-linejoin=\"miter\" d=\"M14 29.5v-13h17v13H14z\"/><path stroke-linecap=\"butt\" d=\"M14 16.5 11 14h23l-3 2.5H14zM11 14V9h4v2h5V9h5v2h5V9h4v5H11z\"/><path fill=\"none\" stroke=\"#ececec\" stroke-linejoin=\"miter\" stroke-width=\"1\" d=\"M12 35.5h21m-20-4h19m-18-2h17m-17-13h17M11 14h23\"/><\/g><\/svg>","type":"text"},{"name":"www/img/wB.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><g fill=\"#fff\" stroke-linecap=\"butt\"><path d=\"M9 36c3.39-.97 10.11.43 13.5-2 3.39 2.43 10.11 1.03 13.5 2 0 0 1.65.54 3 2-.68.97-1.65.99-3 .5-3.39-.97-10.11.46-13.5-1-3.39 1.46-10.11.03-13.5 1-1.35.49-2.32.47-3-.5 1.35-1.94 3-2 3-2z\"/><path d=\"M15 32c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2z\"/><path d=\"M25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\"/><\/g><path stroke-linejoin=\"miter\" d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\"/><\/g><\/svg>","type":"text"},{"name":"www/img/wK.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path stroke-linejoin=\"miter\" d=\"M22.5 11.63V6M20 8h5\"/><path fill=\"#fff\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\"/><path fill=\"#fff\" d=\"M11.5 37c5.5 3.5 15.5 3.5 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\"/><path d=\"M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\"/><\/g><\/svg>","type":"text"},{"name":"www/img/wN.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path fill=\"#fff\" d=\"M22 10c10.5 1 16.5 8 16 29H15c0-9 10-6.5 8-21\"/><path fill=\"#fff\" d=\"M24 18c.38 2.91-5.55 7.37-8 9-3 2-2.82 4.34-5 4-1.042-.94 1.41-3.04 0-3-1 0 .19 1.23-1 2-1 0-4.003 1-4-4 0-2 6-12 6-12s1.89-1.9 2-3.5c-.73-.994-.5-2-.5-3 1-1 3 2.5 3 2.5h2s.78-1.992 2.5-3c1 0 1 3 1 3\"/><path fill=\"#000\" d=\"M9.5 25.5a.5.5 0 1 1-1 0 .5.5 0 1 1 1 0zm5.433-9.75a.5 1.5 30 1 1-.866-.5.5 1.5 30 1 1 .866.5z\"/><\/g><\/svg>","type":"text"},{"name":"www/img/wP.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><path fill=\"#fff\" stroke=\"#000\" stroke-linecap=\"round\" stroke-width=\"1.5\" d=\"M22.5 9c-2.21 0-4 1.79-4 4 0 .89.29 1.71.78 2.38C17.33 16.5 16 18.59 16 21c0 2.03.94 3.84 2.41 5.03-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47 1.47-1.19 2.41-3 2.41-5.03 0-2.41-1.33-4.5-3.28-5.62.49-.67.78-1.49.78-2.38 0-2.21-1.79-4-4-4z\"/><\/svg>","type":"text"},{"name":"www/img/wQ.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"#fff\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path d=\"M8 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zm16.5-4.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM41 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM16 8.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM33 9a2 2 0 1 1-4 0 2 2 0 1 1 4 0z\"/><path stroke-linecap=\"butt\" d=\"M9 26c8.5-1.5 21-1.5 27 0l2-12-7 11V11l-5.5 13.5-3-15-3 15-5.5-14V25L7 14l2 12z\"/><path stroke-linecap=\"butt\" d=\"M9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\"/><path fill=\"none\" d=\"M11.5 30c3.5-1 18.5-1 22 0M12 33.5c6-1 15-1 21 0\"/><\/g><\/svg>","type":"text"},{"name":"www/img/wR.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 45 45\"><g fill=\"#fff\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\"><path stroke-linecap=\"butt\" d=\"M9 39h27v-3H9v3zm3-3v-4h21v4H12zm-1-22V9h4v2h5V9h5v2h5V9h4v5\"/><path d=\"m34 14-3 3H14l-3-3\"/><path stroke-linecap=\"butt\" stroke-linejoin=\"miter\" d=\"M31 17v12.5H14V17\"/><path d=\"m31 29.5 1.5 2.5h-20l1.5-2.5\"/><path fill=\"none\" stroke-linejoin=\"miter\" d=\"M11 14h23\"/><\/g><\/svg>","type":"text"}]
